//
// Events defined according to spreadsheet RD20.Microsoft_Telemetry:
// https://microsoft.sharepoint.com/teams/RD20/_layouts/15/guestaccess.aspx?guestaccesstoken=CvYq0vNEX14YHpt6Apm32hGVucn7xhGiPNy3agemIGU%3d&docid=2_134ca3b212f0945d1a63f7248dfe0e1d7&rev=1
//
// And OneNote RDS_TELEMETRY.RD_Clients:
// https://microsoft.sharepoint.com/teams/RD20/_layouts/15/guestaccess.aspx?guestaccesstoken=ehgVGSGQgdYV6OrNOw%2b7B5otYMoiTr9OWzPNUCvBTec%3d&folderid=2_12cfd8e59a7e74adb848a78a3c63cc880&rev=1
//
// Note: Remember to update com.microsoft.a3rdc.telemetry.asimov.Events.Builder.build() once the
//       content of this file is modified.
//

import "Microsoft.Telemetry.bond"

namespace Microsoft.RDS.Android.Client

enum Source
{
    Undefined = 0,
    Unknown = 1,
    None = 2,
    RdAssistant = 3,
    RdMac = 4
}

enum SourceType
{
    Undefined = 0,
    Unknown = 1,
    LocalDesktop = 2,
    LocalDesktopWithGateway = 3,
    PublishedDesktop = 4,
    PublishedApp = 5,
    PublishedDesktopRdmi = 6,
    PublishedAppRdmi = 7
}

enum HowCreated
{
    Undefined = 0,
    Unknown = 1,
    Manual = 2,
    QuickConnect = 3,
    OnPremFeed = 4,
    Rdmi = 5,
    Import = 6,
    RdpFile = 7,
    Uri = 8
}

enum NetworkType
 {
     Undefined = 0,
     Unknown = 1,
     Wifi = 2,
     Mobile = 3,
     MobileLte = 4,
     MobileHspa = 5,
     MobileEdge = 6,
     Lan = 7
 }

enum HostAddressType
{
    Undefined = 0,
    Unknown = 1,
    ShortName = 2,
    ShortnameLocal = 3,
    Fqdn = 4,
    Ipv4 = 5,
    Ipv6 = 6
}

enum Credentials
{
    Undefined = 0,
    Unknown = 1,
    None = 2,
    UserName = 3,
    UserNamePwd = 4
}

enum ScreenType
{
    Undefined = 0,
    Unknown = 1,
    Phone = 2,
    Tablet = 3,
    Notebook = 4,
    Desktop = 5
}

enum Flavor
{
    Undefined = 0,
    Unknown = 1,
    Store = 2,
    Selfhost = 3,
    Mau = 4,
    Develop = 5,
    Oem = 6,
}

enum ResolutionSelection
{
    Undefined = 0,
    Unknown = 1,
    Default = 2,
    Native = 3,
    Custom = 4,
}

enum ResolutionType
{
    Undefined = 0,
    Unknown = 1,
    General = 2,
    Bookmark = 3,
}

[Description("Base schema of Part C")]
struct BaseSchema: Microsoft.Telemetry.Base
{
    10: uint32 eventVersion;
    20: uint32 sessionId;
    30: uint32 uploadId;
    40: uint32 screenType;
    50: uint32 flavor;
    60: string activityId;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event allows us to understand whether an application was upgraded or was a clean installation.")]
struct AppUpdate : BaseSchema
{
    [Description("Free-form string that identifies the application version. For a new installation this should be '0'.")]
    10: string oldVersion;

    [Description("Free-form string that identifies the application version.")]
    20: string newVersion;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event sends crash data to allow us to understand crashes in our clients. Previously: Crash.")]
struct CrashStackTrace : BaseSchema
{
    [Description("Stacktrace of caught exception in plain text.")]
    10: string stacktrace;

    [Description("Cause of caught exception encoded in plain text.")]
    20: string cause;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event tracks device specific information and reports that for a daily view.")]
struct DailyDeviceInfo : BaseSchema
{
    [Description("Device manufacturer name.")]
    10: string manufacturer;

    [Description("Device model name.")]
    20: string model;

    [Description("Device CPU ABI.")]
    30: string cpuAbi;

    [Description("Device Sdk version.")]
    40: int32 sdkVersion;

    [Description("Device resolution.")]
    50: string deviceResolution;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event allows us to understand how users set their preference.")]
struct DailyGlobalSettings : BaseSchema
{
    [Description("Whether user would like to send diagnostics.")]
    10: bool sendDiagnostics;

    [Description("Whether the user enabled thumbnail images in connection center.")]
    20: bool enableThumbnail;

    [Description("Whether pinch-to-zoom a remote session locally is enabled.")]
    30: bool enablePinchToZoom;

    [Description("Whether using scancode input when available.")]
    40: bool useScancode;

    [Description("0: auto-adjust, 1: lock to portrait, 2: lock to landscape.")]
    50: int32 sessionOrientation;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event tracks details related to a daily client activity.")]
struct DailyResourceInfo : BaseSchema
{
    [Description("Sum of manually set-up remote desktops.")]
    10: int32 localDesktopCount;

    [Description("Sum of on-prem feeds (excluding MT feeds).")]
    20: int32 feedCount;

    [Description("Sum of MT feeds (excluding OnPrem).")]
    30: int32 feedCountMT;

    [Description("Sum of desktops in all on-prem feeds.")]
    40: int32 publishedDesktopCount;

    [Description("Sum of desktops in all MT feeds.")]
    50: int32 publishedDesktopCountMT;

    [Description("Sum of apps in all on-prem feeds.")]
    60: int32 publishedAppCount;

    [Description("Sum of apps in all MT feeds.")]
    70: int32 publishedAppCountMT;

    [Description("Sum of folders in all on-prem feeds.")]
    80: int32 publishedFolderCount;

    [Description("Sum of folders in all MT feeds.")]
    90: int32 publishedFolderCountMT;

    [Description("Sum of tenants (on prem only, no Multi Tenant).")]
    100: int32 tenantCount;

    [Description("Sum of multi tenant tenants.")]
    110: int32 tenantCountMT;

    [Description("Whether device is MDM enrolled.")]
    120: bool isMDMManaged;

    [Description("Whether RD app is MDM-MAM managed.")]
    130: bool isMDMMAMmanaged;

    [Description("Whether pin is required.")]
    140: bool requirePIN;

    [Description("Number of custom resolutions.")]
    150: int32 customResolutionCount;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event allows us to understand how users are subscribing to feeds.")]
struct FeedSubscription : BaseSchema
{
    [Description("add or edit.")]
    10: string action;

    [Description("email or feedUrl.")]
    20: string type;

    [Description("failure, success, or NA. NA implies feedUrl.")]
    30: string discoveryResult;

    [Description("NA, sucess, cancel, or %failurereason%")]
    40: string downloadResult;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event will track specific user actions while in session. Understanding user actions in session will allow us to optimize the UI and UX.")]
struct InSessionActivity : BaseSchema
{
    [Description("Collects what the host OS supports for touch capability.")]
    10: string touchCapability;

    [Description("Collects what input mode the user completed their session in.")]
    20: string inputEnd;

    [Description("Collects a count of the number of times in a session a user toggles between mouse and touch mode.")]
    30: int32 inputToggle;

    [Description("Collects a count of the number of times in a session a user touches the keyboard button in the bbar.")]
    40: int32 swKeyboard;

    [Description("Collects whether a h/w keyboard was used.")]
    50: bool hwKeyboard;

    [Description("Collects a count of the number of times a user interacts with the aux bar.")]
    60: int32 auxBar;

    [Description("Counts how many times a user bring up the extended keyboard.")]
    70: int32 exKeyboard;

    [Description("Collects a count of the number of times a user taps the zoom button.")]
    80: int32 zoom;

    [Description("Collects how a user exited a session - either by back>back or via 'X' on the action bar.")]
    90: string sessionExit;

    [Description("Collects a count of the number of times a user switches between sessions (via action bar).")]
    100: int32 sessionSwitched;

    [Description("Collects a count of the number of times a user switches remoteapp sessions.")]
    110: int32 appSwitched;

    [Description("Collects a count of the number of times the home button is tapped.")]
    120: int32 homeClicked;

    [Description("Was stylus used.")]
    130: bool stylus;

    [Description("Count how many times a user manually repositions the bBar.")]
    140: int32 bBarRepositioned;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event gives us insight in details related to the launching of a session.")]
struct SessionLaunch : BaseSchema
{
    [Description("How was the session launched.")]
    10: uint32 sourceType;

    [Description("An activityID can have multiple connectionIds depending on how many bookmarks a user has. Combined with a sessionId this can help with diagnosing a specific user that has connection issues.")]
    20: string connectionId;

    [Description("Start point: click the bookmark. End point: session activate, onClientConnected. If launch fails, launchTime is 0. Measured in millisecond.")]
    30: int64 launchTime;

    [Description("The stack correlation id. This corresponds to the thread ActivityId that gets created in stack code.")]
    40: string correlationId;

    [Description("This captures the source of the boookmark that the session was launched with. E.g. rdassistant. This should match the local desktop attribute source attribute.")]
    50: uint32 source;

    [Description("How was this session launch bookmark or launch created.")]
    60: uint32 howCreated;

    [Description("The actual scale used to connect by session.")]
    70: int32 scaleUsed;

    [Description("Map what your platform provides to the codes provided in the parameters.")]
    80: uint32 networkType;

    [Description("Shortname, fqdn, ipv4, or ipv6.")]
    90: uint32 hostAddressType;

    [Description("Applicable only for hostAddressType=ipv4 and networkType=WIFI")]
    100: bool samev4subnet;

    [Description("Based on whether the bookmark has saved creds.")]
    110: uint32 hostCreds;

    [Description("Based on whether gateway has creds in bookmark level.")]
    120: uint32 gwyCreds;

    [Description("To identify whether the resolution is general or bookmark specific.")]
    130: uint32 resolutionType;

    [Description("Default, native, or custom.")]
    140: uint32 resolutionSelection;

    [Description("Format, e.g. 1024 x 768.")]
    150: string resolutionUsed;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event gives us insight in details related to the invocation of a session and it's termination attributes.")]
struct SessionData : BaseSchema
{
    [Description("Whether the session ended via a user explicitly disconnecting from UI or server side logoff.")]
    10: bool userInitiated;

    [Description("DisconnectReason from AsyncDisconnect event, getLegacyCode. Previously: disconnectCode.")]
    20: int32 clientStackDisconnectCode;

    [Description("DisconnectReason from AsyncDisconnect event, getLegacyExtendedCode. Previously: disconnectExtendedCode.")]
    30: int32 serverStackDisconnectCode;

    [Description("The stack correlation id. This corresponds to the thread ActivityId that gets created in stack code.")]
    40: string correlationId;

    [Description("Duration of the session in seconds. Previously: minutes.")]
    50: int64 duration;
};

[Persistence("Normal")]
[Latency("Normal")]
[Description("This event tracks changes being made to the app settings to help us understand how often users modify the options under settings.")]
struct SettingChanged : BaseSchema
{
    [Description("Name of the changed setting.")]
    10: string settingName;

    [Description("Old value of the setting.")]
    20: string oldValue;

    [Description("New value of the setting.")]
    30: string newValue;
};
