//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Java.tt
//     File     : Microsoft/Telemetry/Data.java
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package Microsoft.Telemetry;


// [Description("Data struct to contain both B and C sections.")]
/**
* Data{TDomain extends com.microsoft.bond.BondSerializable}
*/
@SuppressWarnings("all")
public class Data<TDomain extends com.microsoft.bond.BondSerializable> extends Microsoft.Telemetry.Base {
    // TODO: implement
    public com.microsoft.bond.BondSerializable clone() {return null;}

    //
    // Fields
    //

    // 20: Required TDomain baseData
    private TDomain baseData;

    /**
     * @return current value of baseData property
     */
    public final TDomain getBaseData() {
        return this.baseData;
    }

    /**
     * @param value new value of baseData property
     */
    public final void setBaseData(TDomain value) {
        this.baseData = value;
    }

    /**
     * Schema metadata
     */
    public static class Schema {
        public static final com.microsoft.bond.SchemaDef schemaDef;
        public static final com.microsoft.bond.Metadata metadata;
        private static final com.microsoft.bond.Metadata baseData_metadata;

        static {
            metadata = new com.microsoft.bond.Metadata();
            metadata.setName("Data");
            metadata.setQualified_name("Microsoft.Telemetry.Data");

            metadata.getAttributes().put("Description", "Data struct to contain both B and C sections.");

            // baseData
            baseData_metadata = new com.microsoft.bond.Metadata();
            baseData_metadata.setName("baseData");
            baseData_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            baseData_metadata.getAttributes().put("Name", "Item");
            baseData_metadata.getAttributes().put("Description", "Container for data item (B section).");

            schemaDef = new com.microsoft.bond.SchemaDef();
            schemaDef.setRoot(getTypeDef(schemaDef));
        }

        public static com.microsoft.bond.TypeDef getTypeDef(com.microsoft.bond.SchemaDef schema)
        {
            com.microsoft.bond.TypeDef type = new com.microsoft.bond.TypeDef();
            type.setId(com.microsoft.bond.BondDataType.BT_STRUCT);
            type.setStruct_def(getStructDef(schema));
            return type;
        }

        private static short getStructDef(com.microsoft.bond.SchemaDef schema)
        {
            short pos;

            for(pos = 0; pos < schema.getStructs().size(); pos++)
            {
                if (schema.getStructs().get(pos).getMetadata() == metadata)
                {
                    return pos;
                }
            }

            com.microsoft.bond.StructDef structDef = new com.microsoft.bond.StructDef();
            schema.getStructs().add(structDef);

            structDef.setMetadata(metadata);
            structDef.setBase_def(Microsoft.Telemetry.Base.Schema.getTypeDef(schema));

            com.microsoft.bond.FieldDef field;

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)20);
            field.setMetadata(baseData_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRUCT);
            structDef.getFields().add(field);

            return pos;
        }
    }

    /*
    * @see com.microsoft.bond.BondMirror#getField()
    */
    public Object getField(com.microsoft.bond.FieldDef fieldDef) {
        switch (fieldDef.getId()) {
            case (short)20:
                return this.baseData;
            default:
                return null;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#setField()
    */
    public void setField(com.microsoft.bond.FieldDef fieldDef, Object value) {
        switch (fieldDef.getId()) {
            case (short)20:
                this.baseData = (TDomain)value;
                break;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#createInstance()
    */
    public com.microsoft.bond.BondMirror createInstance(com.microsoft.bond.StructDef structDef) {
        return null;
    }

    /*
     * @see com.microsoft.bond.BondMirror#getSchema()
     */
    public com.microsoft.bond.SchemaDef getSchema()
    {
        return getRuntimeSchema();
    }

    /**
     * Static method returning {@link SchemaDef} instance.
     */
    public static com.microsoft.bond.SchemaDef getRuntimeSchema()
    {
        return Schema.schemaDef;
    }


    private Class<TDomain> generic_type_TDomain;


    // Constructor
    public Data() {
        java.lang.reflect.Type[] genericTypes = getGenericTypeArguments();
        int typeIndex = 0;
        this.generic_type_TDomain = (Class<TDomain>) genericTypes[typeIndex++];
        
    }

    /*
     * @see com.microsoft.bond.BondSerializable#reset()
     */
    public void reset() {
        reset("Data", "Microsoft.Telemetry.Data");
    }

    protected void reset(String name, String qualifiedName) {
        super.reset(name, qualifiedName);
        this.baseData = null;
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, (com.microsoft.bond.SchemaDef)schema, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        reader.readBegin();
        readNested(reader);
        reader.readEnd();
    }

    /*
     * Called to read a struct that is contained inside another struct.
     */
    public void readNested(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        if (!reader.hasCapability(com.microsoft.bond.ProtocolCapability.TAGGED)) {
            readUntagged(reader, false);
        } else if (readTagged(reader, false)) {
            com.microsoft.bond.internal.ReadHelper.skipPartialStruct(reader);
        }
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        // read(com.microsoft.bond.internal.ProtocolHelper.createReader(reader, schema));
    }

    protected void readUntagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = reader.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);

        reader.readStructBegin(isBase);
        super.readUntagged(reader, true);

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_baseData(reader, com.microsoft.bond.BondDataType.BT_STRUCT);
        }
        else
        {
            // throw new BondException("Missing required field \"baseData\", id=20");
        }
        reader.readStructEnd();
    } // ReadUntagged()


    protected boolean readTagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean isPartial;
        reader.readStructBegin(isBase);

        if (!super.readTagged(reader, true))
        {
            return false;
        }
        // BitArray seenRequiredFields = new BitArray(21);

        while (true) {
            com.microsoft.bond.ProtocolReader.FieldTag fieldTag = reader.readFieldBegin();

            if (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP
             || fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE) {
                isPartial = (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE);
                break;
            }

            switch (fieldTag.id) {
                case 20:
                    this.readFieldImpl_baseData(reader, fieldTag.type);
                    // seenRequiredFields.Set(20, true);
                    break;
                default:
                    reader.skip(fieldTag.type);
                    break;
            }

            reader.readFieldEnd();
        }

        reader.readStructEnd();

        //checkRequiredFieldsAreSeen(seenRequiredFields);
        return isPartial;
    }


    private void readFieldImpl_baseData(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
                try {
                     this.baseData = this.generic_type_TDomain.newInstance();
                     this.baseData.readNested(reader);
                } catch (InstantiationException e) {
                } catch (IllegalAccessException e) {
                }
    } // readFieldImpl_baseData


    /*
     * @see com.microsoft.bond.BondSerializable#marshal()
     */
    public void marshal(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.marshal(this, writer);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#write()
     */
    public void write(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        writer.writeBegin();
        com.microsoft.bond.ProtocolWriter firstPassWriter;
        if ((firstPassWriter = writer.getFirstPassWriter()) != null)
        {
            writeNested(firstPassWriter, false);
            writeNested(writer, false);
        }
        else
        {
          writeNested(writer, false);
        }
        writer.writeEnd();
    }

    public void writeNested(com.microsoft.bond.ProtocolWriter writer, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = writer.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);
        writer.writeStructBegin(Schema.metadata, isBase);
        super.writeNested(writer, true);

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRUCT, 20, Schema.baseData_metadata);
        baseData.writeNested(writer, false);
        writer.writeFieldEnd();

        writer.writeStructEnd(isBase);
    } // writeNested


    public boolean memberwiseCompare(Object obj) {
        if (obj == null) {
            return false;
        }

        Data<TDomain> that = (Data<TDomain>)obj;

        return memberwiseCompareQuick(that) && memberwiseCompareDeep(that);
    }

    protected boolean memberwiseCompareQuick(Data<TDomain> that) {
        boolean equals = true;
        equals = equals && super.memberwiseCompareQuick(that);
        // Todo implement memberwise compare equals for generic types
        // equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(this.baseData, that.baseData));
        return equals;
    } // memberwiseCompareQuick

    protected boolean memberwiseCompareDeep(Data<TDomain> that) {
        boolean equals = true;
        equals = equals && super.memberwiseCompareDeep(that);
        return equals;
    } // memberwiseCompareDeep

    private java.lang.reflect.Type[] getGenericTypeArguments()
    {
        java.lang.reflect.ParameterizedType superclass = (java.lang.reflect.ParameterizedType) this.getClass().getGenericSuperclass();
        java.lang.reflect.Type[] actualTypeArguments = superclass.getActualTypeArguments();
        return actualTypeArguments;
    }
}; // class Data<TDomain>
