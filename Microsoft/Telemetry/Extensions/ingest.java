//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Java.tt
//     File     : Microsoft/Telemetry/Extensions/ingest.java
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package Microsoft.Telemetry.Extensions;


// [Description("Describes the fields added dynamically by the service. Clients should NOT use this section since it is adding dynamically by the service.")]
/**
* ingest
*/
@SuppressWarnings("all")
public class ingest extends Microsoft.Telemetry.Extension {
    // TODO: implement
    public com.microsoft.bond.BondSerializable clone() {return null;}

    //
    // Fields
    //

    // 10: Required string time
    private String time;

    // 20: Required string clientIp
    private String clientIp;

    // 30: Optional int64 auth
    private long auth;

    // 40: Optional int64 quality
    private long quality;

    // 50: Optional string uploadTime
    private String uploadTime;

    // 60: Optional string userAgent
    private String userAgent;

    /**
     * @return current value of time property
     */
    public final String getTime() {
        return this.time;
    }

    /**
     * @param value new value of time property
     */
    public final void setTime(String value) {
        this.time = value;
    }

    /**
     * @return current value of clientIp property
     */
    public final String getClientIp() {
        return this.clientIp;
    }

    /**
     * @param value new value of clientIp property
     */
    public final void setClientIp(String value) {
        this.clientIp = value;
    }

    /**
     * @return current value of auth property
     */
    public final long getAuth() {
        return this.auth;
    }

    /**
     * @param value new value of auth property
     */
    public final void setAuth(long value) {
        this.auth = value;
    }

    /**
     * @return current value of quality property
     */
    public final long getQuality() {
        return this.quality;
    }

    /**
     * @param value new value of quality property
     */
    public final void setQuality(long value) {
        this.quality = value;
    }

    /**
     * @return current value of uploadTime property
     */
    public final String getUploadTime() {
        return this.uploadTime;
    }

    /**
     * @param value new value of uploadTime property
     */
    public final void setUploadTime(String value) {
        this.uploadTime = value;
    }

    /**
     * @return current value of userAgent property
     */
    public final String getUserAgent() {
        return this.userAgent;
    }

    /**
     * @param value new value of userAgent property
     */
    public final void setUserAgent(String value) {
        this.userAgent = value;
    }

    /**
     * Schema metadata
     */
    public static class Schema {
        public static final com.microsoft.bond.SchemaDef schemaDef;
        public static final com.microsoft.bond.Metadata metadata;
        private static final com.microsoft.bond.Metadata time_metadata;
        private static final com.microsoft.bond.Metadata clientIp_metadata;
        private static final com.microsoft.bond.Metadata auth_metadata;
        private static final com.microsoft.bond.Metadata quality_metadata;
        private static final com.microsoft.bond.Metadata uploadTime_metadata;
        private static final com.microsoft.bond.Metadata userAgent_metadata;

        static {
            metadata = new com.microsoft.bond.Metadata();
            metadata.setName("ingest");
            metadata.setQualified_name("Microsoft.Telemetry.Extensions.ingest");

            metadata.getAttributes().put("Description", "Describes the fields added dynamically by the service. Clients should NOT use this section since it is adding dynamically by the service.");

            // time
            time_metadata = new com.microsoft.bond.Metadata();
            time_metadata.setName("time");
            time_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            time_metadata.getAttributes().put("Name", "IngestDateTime");

            // clientIp
            clientIp_metadata = new com.microsoft.bond.Metadata();
            clientIp_metadata.setName("clientIp");
            clientIp_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            clientIp_metadata.getAttributes().put("Name", "ClientIp");

            // auth
            auth_metadata = new com.microsoft.bond.Metadata();
            auth_metadata.setName("auth");
            auth_metadata.getAttributes().put("Name", "DataAuthorization");
            auth_metadata.getDefault_value().setInt_value(0L);

            // quality
            quality_metadata = new com.microsoft.bond.Metadata();
            quality_metadata.setName("quality");
            quality_metadata.getAttributes().put("Name", "DataQuality");
            quality_metadata.getDefault_value().setInt_value(0L);

            // uploadTime
            uploadTime_metadata = new com.microsoft.bond.Metadata();
            uploadTime_metadata.setName("uploadTime");
            uploadTime_metadata.getAttributes().put("Name", "UploadDateTime");

            // userAgent
            userAgent_metadata = new com.microsoft.bond.Metadata();
            userAgent_metadata.setName("userAgent");
            userAgent_metadata.getAttributes().put("Name", "UserAgent");

            schemaDef = new com.microsoft.bond.SchemaDef();
            schemaDef.setRoot(getTypeDef(schemaDef));
        }

        public static com.microsoft.bond.TypeDef getTypeDef(com.microsoft.bond.SchemaDef schema)
        {
            com.microsoft.bond.TypeDef type = new com.microsoft.bond.TypeDef();
            type.setId(com.microsoft.bond.BondDataType.BT_STRUCT);
            type.setStruct_def(getStructDef(schema));
            return type;
        }

        private static short getStructDef(com.microsoft.bond.SchemaDef schema)
        {
            short pos;

            for(pos = 0; pos < schema.getStructs().size(); pos++)
            {
                if (schema.getStructs().get(pos).getMetadata() == metadata)
                {
                    return pos;
                }
            }

            com.microsoft.bond.StructDef structDef = new com.microsoft.bond.StructDef();
            schema.getStructs().add(structDef);

            structDef.setMetadata(metadata);
            structDef.setBase_def(Microsoft.Telemetry.Extension.Schema.getTypeDef(schema));

            com.microsoft.bond.FieldDef field;

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)10);
            field.setMetadata(time_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)20);
            field.setMetadata(clientIp_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)30);
            field.setMetadata(auth_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_INT64);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)40);
            field.setMetadata(quality_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_INT64);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)50);
            field.setMetadata(uploadTime_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)60);
            field.setMetadata(userAgent_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            return pos;
        }
    }

    /*
    * @see com.microsoft.bond.BondMirror#getField()
    */
    public Object getField(com.microsoft.bond.FieldDef fieldDef) {
        switch (fieldDef.getId()) {
            case (short)10:
                return this.time;
            case (short)20:
                return this.clientIp;
            case (short)30:
                return this.auth;
            case (short)40:
                return this.quality;
            case (short)50:
                return this.uploadTime;
            case (short)60:
                return this.userAgent;
            default:
                return null;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#setField()
    */
    public void setField(com.microsoft.bond.FieldDef fieldDef, Object value) {
        switch (fieldDef.getId()) {
            case (short)10:
                this.time = (String)value;
                break;
            case (short)20:
                this.clientIp = (String)value;
                break;
            case (short)30:
                this.auth = (Long)value;
                break;
            case (short)40:
                this.quality = (Long)value;
                break;
            case (short)50:
                this.uploadTime = (String)value;
                break;
            case (short)60:
                this.userAgent = (String)value;
                break;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#createInstance()
    */
    public com.microsoft.bond.BondMirror createInstance(com.microsoft.bond.StructDef structDef) {
        return null;
    }

    /*
     * @see com.microsoft.bond.BondMirror#getSchema()
     */
    public com.microsoft.bond.SchemaDef getSchema()
    {
        return getRuntimeSchema();
    }

    /**
     * Static method returning {@link SchemaDef} instance.
     */
    public static com.microsoft.bond.SchemaDef getRuntimeSchema()
    {
        return Schema.schemaDef;
    }


    // Constructor
    public ingest() {
        
    }

    /*
     * @see com.microsoft.bond.BondSerializable#reset()
     */
    public void reset() {
        reset("ingest", "Microsoft.Telemetry.Extensions.ingest");
    }

    protected void reset(String name, String qualifiedName) {
        super.reset(name, qualifiedName);
        this.time = "";
        this.clientIp = "";
        this.auth = 0L;
        this.quality = 0L;
        this.uploadTime = "";
        this.userAgent = "";
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, (com.microsoft.bond.SchemaDef)schema, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        reader.readBegin();
        readNested(reader);
        reader.readEnd();
    }

    /*
     * Called to read a struct that is contained inside another struct.
     */
    public void readNested(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        if (!reader.hasCapability(com.microsoft.bond.ProtocolCapability.TAGGED)) {
            readUntagged(reader, false);
        } else if (readTagged(reader, false)) {
            com.microsoft.bond.internal.ReadHelper.skipPartialStruct(reader);
        }
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        // read(com.microsoft.bond.internal.ProtocolHelper.createReader(reader, schema));
    }

    protected void readUntagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = reader.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);

        reader.readStructBegin(isBase);
        super.readUntagged(reader, true);

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.time = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"time\", id=10");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.clientIp = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"clientIp\", id=20");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.auth = reader.readInt64();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.quality = reader.readInt64();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.uploadTime = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.userAgent = reader.readString();
        }
        reader.readStructEnd();
    } // ReadUntagged()


    protected boolean readTagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean isPartial;
        reader.readStructBegin(isBase);

        if (!super.readTagged(reader, true))
        {
            return false;
        }
        // BitArray seenRequiredFields = new BitArray(21);

        while (true) {
            com.microsoft.bond.ProtocolReader.FieldTag fieldTag = reader.readFieldBegin();

            if (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP
             || fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE) {
                isPartial = (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE);
                break;
            }

            switch (fieldTag.id) {
                case 10:
                    this.time = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(10, true);
                    break;
                case 20:
                    this.clientIp = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(20, true);
                    break;
                case 30:
                    this.auth = com.microsoft.bond.internal.ReadHelper.readInt64(reader, fieldTag.type);
                    break;
                case 40:
                    this.quality = com.microsoft.bond.internal.ReadHelper.readInt64(reader, fieldTag.type);
                    break;
                case 50:
                    this.uploadTime = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 60:
                    this.userAgent = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                default:
                    reader.skip(fieldTag.type);
                    break;
            }

            reader.readFieldEnd();
        }

        reader.readStructEnd();

        //checkRequiredFieldsAreSeen(seenRequiredFields);
        return isPartial;
    }


    /*
     * @see com.microsoft.bond.BondSerializable#marshal()
     */
    public void marshal(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.marshal(this, writer);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#write()
     */
    public void write(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        writer.writeBegin();
        com.microsoft.bond.ProtocolWriter firstPassWriter;
        if ((firstPassWriter = writer.getFirstPassWriter()) != null)
        {
            writeNested(firstPassWriter, false);
            writeNested(writer, false);
        }
        else
        {
          writeNested(writer, false);
        }
        writer.writeEnd();
    }

    public void writeNested(com.microsoft.bond.ProtocolWriter writer, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = writer.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);
        writer.writeStructBegin(Schema.metadata, isBase);
        super.writeNested(writer, true);

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 10, Schema.time_metadata);
        writer.writeString(time);
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 20, Schema.clientIp_metadata);
        writer.writeString(clientIp);
        writer.writeFieldEnd();

        if (!canOmitFields || (auth != Schema.auth_metadata.getDefault_value().getInt_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_INT64, 30, Schema.auth_metadata);
            writer.writeInt64(auth);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_INT64, 30, Schema.auth_metadata);
        }

        if (!canOmitFields || (quality != Schema.quality_metadata.getDefault_value().getInt_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_INT64, 40, Schema.quality_metadata);
            writer.writeInt64(quality);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_INT64, 40, Schema.quality_metadata);
        }

        if (!canOmitFields || (uploadTime != Schema.uploadTime_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 50, Schema.uploadTime_metadata);
            writer.writeString(uploadTime);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 50, Schema.uploadTime_metadata);
        }

        if (!canOmitFields || (userAgent != Schema.userAgent_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 60, Schema.userAgent_metadata);
            writer.writeString(userAgent);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 60, Schema.userAgent_metadata);
        }

        writer.writeStructEnd(isBase);
    } // writeNested


    public boolean memberwiseCompare(Object obj) {
        if (obj == null) {
            return false;
        }

        ingest that = (ingest)obj;

        return memberwiseCompareQuick(that) && memberwiseCompareDeep(that);
    }

    protected boolean memberwiseCompareQuick(ingest that) {
        boolean equals = true;
        equals = equals && super.memberwiseCompareQuick(that);
        equals = equals && ((this.time == null) == (that.time == null));
        equals = equals && (this.time == null ? true : (this.time.length() == that.time.length()));
        equals = equals && ((this.clientIp == null) == (that.clientIp == null));
        equals = equals && (this.clientIp == null ? true : (this.clientIp.length() == that.clientIp.length()));
        equals = equals && (this.auth == that.auth);
        equals = equals && (this.quality == that.quality);
        equals = equals && ((this.uploadTime == null) == (that.uploadTime == null));
        equals = equals && (this.uploadTime == null ? true : (this.uploadTime.length() == that.uploadTime.length()));
        equals = equals && ((this.userAgent == null) == (that.userAgent == null));
        equals = equals && (this.userAgent == null ? true : (this.userAgent.length() == that.userAgent.length()));
        return equals;
    } // memberwiseCompareQuick

    protected boolean memberwiseCompareDeep(ingest that) {
        boolean equals = true;
        equals = equals && super.memberwiseCompareDeep(that);
        equals = equals && (this.time == null ? true : this.time.equals(that.time));
        equals = equals && (this.clientIp == null ? true : this.clientIp.equals(that.clientIp));
        equals = equals && (this.uploadTime == null ? true : this.uploadTime.equals(that.uploadTime));
        equals = equals && (this.userAgent == null ? true : this.userAgent.equals(that.userAgent));
        return equals;
    } // memberwiseCompareDeep

}; // class ingest
