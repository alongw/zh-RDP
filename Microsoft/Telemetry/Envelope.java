//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Java.tt
//     File     : Microsoft/Telemetry/Envelope.java
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package Microsoft.Telemetry;


// [Description("System variables for a telemetry item (Part A)")]
/**
* Envelope
*/
@SuppressWarnings("all")
public class Envelope implements com.microsoft.bond.BondSerializable, com.microsoft.bond.BondMirror {
    // TODO: implement
    public com.microsoft.bond.BondSerializable clone() {return null;}

    //
    // Fields
    //

    // 10: Required string ver
    private String ver;

    // 20: Required string name
    private String name;

    // 30: Required string time
    private String time;

    // 40: Optional double popSample
    private double popSample;

    // 50: Optional string epoch
    private String epoch;

    // 60: Optional int64 seqNum
    private long seqNum;

    // 70: Optional string iKey
    private String iKey;

    // 80: Optional int64 flags
    private long flags;

    // 90: Optional string os
    private String os;

    // 100: Optional string osVer
    private String osVer;

    // 110: Optional string appId
    private String appId;

    // 120: Optional string appVer
    private String appVer;

    // 130: Optional string cV
    private String cV;

    // 500: Optional map<string, string> tags
    private java.util.HashMap<String, String> tags;

    // 510: Optional map<string, bonded<Microsoft.Telemetry.Extension>> ext
    private java.util.HashMap<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>> ext;

    // 999: Optional bonded<Microsoft.Telemetry.Base> data
    private com.microsoft.bond.Bonded<Microsoft.Telemetry.Base> data;

    /**
     * @return current value of ver property
     */
    public final String getVer() {
        return this.ver;
    }

    /**
     * @param value new value of ver property
     */
    public final void setVer(String value) {
        this.ver = value;
    }

    /**
     * @return current value of name property
     */
    public final String getName() {
        return this.name;
    }

    /**
     * @param value new value of name property
     */
    public final void setName(String value) {
        this.name = value;
    }

    /**
     * @return current value of time property
     */
    public final String getTime() {
        return this.time;
    }

    /**
     * @param value new value of time property
     */
    public final void setTime(String value) {
        this.time = value;
    }

    /**
     * @return current value of popSample property
     */
    public final double getPopSample() {
        return this.popSample;
    }

    /**
     * @param value new value of popSample property
     */
    public final void setPopSample(double value) {
        this.popSample = value;
    }

    /**
     * @return current value of epoch property
     */
    public final String getEpoch() {
        return this.epoch;
    }

    /**
     * @param value new value of epoch property
     */
    public final void setEpoch(String value) {
        this.epoch = value;
    }

    /**
     * @return current value of seqNum property
     */
    public final long getSeqNum() {
        return this.seqNum;
    }

    /**
     * @param value new value of seqNum property
     */
    public final void setSeqNum(long value) {
        this.seqNum = value;
    }

    /**
     * @return current value of iKey property
     */
    public final String getIKey() {
        return this.iKey;
    }

    /**
     * @param value new value of iKey property
     */
    public final void setIKey(String value) {
        this.iKey = value;
    }

    /**
     * @return current value of flags property
     */
    public final long getFlags() {
        return this.flags;
    }

    /**
     * @param value new value of flags property
     */
    public final void setFlags(long value) {
        this.flags = value;
    }

    /**
     * @return current value of os property
     */
    public final String getOs() {
        return this.os;
    }

    /**
     * @param value new value of os property
     */
    public final void setOs(String value) {
        this.os = value;
    }

    /**
     * @return current value of osVer property
     */
    public final String getOsVer() {
        return this.osVer;
    }

    /**
     * @param value new value of osVer property
     */
    public final void setOsVer(String value) {
        this.osVer = value;
    }

    /**
     * @return current value of appId property
     */
    public final String getAppId() {
        return this.appId;
    }

    /**
     * @param value new value of appId property
     */
    public final void setAppId(String value) {
        this.appId = value;
    }

    /**
     * @return current value of appVer property
     */
    public final String getAppVer() {
        return this.appVer;
    }

    /**
     * @param value new value of appVer property
     */
    public final void setAppVer(String value) {
        this.appVer = value;
    }

    /**
     * @return current value of cV property
     */
    public final String getCV() {
        return this.cV;
    }

    /**
     * @param value new value of cV property
     */
    public final void setCV(String value) {
        this.cV = value;
    }

    /**
     * @return current value of tags property
     */
    public final java.util.HashMap<String, String> getTags() {
        return this.tags;
    }

    /**
     * @param value new value of tags property
     */
    public final void setTags(java.util.HashMap<String, String> value) {
        this.tags = value;
    }

    /**
     * @return current value of ext property
     */
    public final java.util.HashMap<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>> getExt() {
        return this.ext;
    }

    /**
     * @param value new value of ext property
     */
    public final void setExt(java.util.HashMap<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>> value) {
        this.ext = value;
    }

    /**
     * @return current value of data property
     */
    public final com.microsoft.bond.Bonded<Microsoft.Telemetry.Base> getData() {
        return this.data;
    }

    /**
     * @param value new value of data property
     */
    public final void setData(com.microsoft.bond.Bonded<Microsoft.Telemetry.Base> value) {
        this.data = value;
    }

    /**
     * Schema metadata
     */
    public static class Schema {
        public static final com.microsoft.bond.SchemaDef schemaDef;
        public static final com.microsoft.bond.Metadata metadata;
        private static final com.microsoft.bond.Metadata ver_metadata;
        private static final com.microsoft.bond.Metadata name_metadata;
        private static final com.microsoft.bond.Metadata time_metadata;
        private static final com.microsoft.bond.Metadata popSample_metadata;
        private static final com.microsoft.bond.Metadata epoch_metadata;
        private static final com.microsoft.bond.Metadata seqNum_metadata;
        private static final com.microsoft.bond.Metadata iKey_metadata;
        private static final com.microsoft.bond.Metadata flags_metadata;
        private static final com.microsoft.bond.Metadata os_metadata;
        private static final com.microsoft.bond.Metadata osVer_metadata;
        private static final com.microsoft.bond.Metadata appId_metadata;
        private static final com.microsoft.bond.Metadata appVer_metadata;
        private static final com.microsoft.bond.Metadata cV_metadata;
        private static final com.microsoft.bond.Metadata tags_metadata;
        private static final com.microsoft.bond.Metadata ext_metadata;
        private static final com.microsoft.bond.Metadata data_metadata;

        static {
            metadata = new com.microsoft.bond.Metadata();
            metadata.setName("Envelope");
            metadata.setQualified_name("Microsoft.Telemetry.Envelope");

            metadata.getAttributes().put("Description", "System variables for a telemetry item (Part A)");

            // ver
            ver_metadata = new com.microsoft.bond.Metadata();
            ver_metadata.setName("ver");
            ver_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            ver_metadata.getAttributes().put("Name", "SchemaVersion");

            // name
            name_metadata = new com.microsoft.bond.Metadata();
            name_metadata.setName("name");
            name_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            name_metadata.getAttributes().put("Name", "DataTypeName");

            // time
            time_metadata = new com.microsoft.bond.Metadata();
            time_metadata.setName("time");
            time_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            time_metadata.getAttributes().put("Name", "DateTime");

            // popSample
            popSample_metadata = new com.microsoft.bond.Metadata();
            popSample_metadata.setName("popSample");
            popSample_metadata.getAttributes().put("Name", "SamplingRate");
            popSample_metadata.getDefault_value().setDouble_value(100);

            // epoch
            epoch_metadata = new com.microsoft.bond.Metadata();
            epoch_metadata.setName("epoch");
            epoch_metadata.getAttributes().put("Name", "Epoch");

            // seqNum
            seqNum_metadata = new com.microsoft.bond.Metadata();
            seqNum_metadata.setName("seqNum");
            seqNum_metadata.getAttributes().put("Name", "SequenceNumber");
            seqNum_metadata.getDefault_value().setInt_value(0L);

            // iKey
            iKey_metadata = new com.microsoft.bond.Metadata();
            iKey_metadata.setName("iKey");
            iKey_metadata.getAttributes().put("Name", "InstrumentationKey");

            // flags
            flags_metadata = new com.microsoft.bond.Metadata();
            flags_metadata.setName("flags");
            flags_metadata.getAttributes().put("Name", "TelemetryProperties");
            flags_metadata.getDefault_value().setInt_value(0L);

            // os
            os_metadata = new com.microsoft.bond.Metadata();
            os_metadata.setName("os");
            os_metadata.getAttributes().put("Name", "OsPlatform");

            // osVer
            osVer_metadata = new com.microsoft.bond.Metadata();
            osVer_metadata.setName("osVer");
            osVer_metadata.getAttributes().put("Name", "OsVersion");

            // appId
            appId_metadata = new com.microsoft.bond.Metadata();
            appId_metadata.setName("appId");
            appId_metadata.getAttributes().put("Name", "ApplicationId");

            // appVer
            appVer_metadata = new com.microsoft.bond.Metadata();
            appVer_metadata.setName("appVer");
            appVer_metadata.getAttributes().put("Name", "ApplicationVersion");

            // cV
            cV_metadata = new com.microsoft.bond.Metadata();
            cV_metadata.setName("cV");
            cV_metadata.getAttributes().put("Name", "CorrelationVector");

            // tags
            tags_metadata = new com.microsoft.bond.Metadata();
            tags_metadata.setName("tags");
            tags_metadata.getAttributes().put("Name", "Tags");

            // ext
            ext_metadata = new com.microsoft.bond.Metadata();
            ext_metadata.setName("ext");
            ext_metadata.getAttributes().put("Name", "Extensions");

            // data
            data_metadata = new com.microsoft.bond.Metadata();
            data_metadata.setName("data");
            data_metadata.getAttributes().put("Name", "TelemetryData");

            schemaDef = new com.microsoft.bond.SchemaDef();
            schemaDef.setRoot(getTypeDef(schemaDef));
        }

        public static com.microsoft.bond.TypeDef getTypeDef(com.microsoft.bond.SchemaDef schema)
        {
            com.microsoft.bond.TypeDef type = new com.microsoft.bond.TypeDef();
            type.setId(com.microsoft.bond.BondDataType.BT_STRUCT);
            type.setStruct_def(getStructDef(schema));
            return type;
        }

        private static short getStructDef(com.microsoft.bond.SchemaDef schema)
        {
            short pos;

            for(pos = 0; pos < schema.getStructs().size(); pos++)
            {
                if (schema.getStructs().get(pos).getMetadata() == metadata)
                {
                    return pos;
                }
            }

            com.microsoft.bond.StructDef structDef = new com.microsoft.bond.StructDef();
            schema.getStructs().add(structDef);

            structDef.setMetadata(metadata);

            com.microsoft.bond.FieldDef field;

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)10);
            field.setMetadata(ver_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)20);
            field.setMetadata(name_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)30);
            field.setMetadata(time_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)40);
            field.setMetadata(popSample_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_DOUBLE);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)50);
            field.setMetadata(epoch_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)60);
            field.setMetadata(seqNum_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_INT64);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)70);
            field.setMetadata(iKey_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)80);
            field.setMetadata(flags_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_INT64);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)90);
            field.setMetadata(os_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)100);
            field.setMetadata(osVer_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)110);
            field.setMetadata(appId_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)120);
            field.setMetadata(appVer_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)130);
            field.setMetadata(cV_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)500);
            field.setMetadata(tags_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_MAP);
            field.getType().setKey(new com.microsoft.bond.TypeDef());
            field.getType().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getKey().setId(com.microsoft.bond.BondDataType.BT_STRING);
            field.getType().getElement().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)510);
            field.setMetadata(ext_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_MAP);
            field.getType().setKey(new com.microsoft.bond.TypeDef());
            field.getType().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getKey().setId(com.microsoft.bond.BondDataType.BT_STRING);
            field.getType().setElement(Microsoft.Telemetry.Extension.Schema.getTypeDef(schema));
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)999);
            field.setMetadata(data_metadata);
            field.setType(Microsoft.Telemetry.Base.Schema.getTypeDef(schema));
            structDef.getFields().add(field);

            return pos;
        }
    }

    /*
    * @see com.microsoft.bond.BondMirror#getField()
    */
    public Object getField(com.microsoft.bond.FieldDef fieldDef) {
        switch (fieldDef.getId()) {
            case (short)10:
                return this.ver;
            case (short)20:
                return this.name;
            case (short)30:
                return this.time;
            case (short)40:
                return this.popSample;
            case (short)50:
                return this.epoch;
            case (short)60:
                return this.seqNum;
            case (short)70:
                return this.iKey;
            case (short)80:
                return this.flags;
            case (short)90:
                return this.os;
            case (short)100:
                return this.osVer;
            case (short)110:
                return this.appId;
            case (short)120:
                return this.appVer;
            case (short)130:
                return this.cV;
            case (short)500:
                return this.tags;
            case (short)510:
                return this.ext;
            case (short)999:
                return this.data;
            default:
                return null;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#setField()
    */
    public void setField(com.microsoft.bond.FieldDef fieldDef, Object value) {
        switch (fieldDef.getId()) {
            case (short)10:
                this.ver = (String)value;
                break;
            case (short)20:
                this.name = (String)value;
                break;
            case (short)30:
                this.time = (String)value;
                break;
            case (short)40:
                this.popSample = (Double)value;
                break;
            case (short)50:
                this.epoch = (String)value;
                break;
            case (short)60:
                this.seqNum = (Long)value;
                break;
            case (short)70:
                this.iKey = (String)value;
                break;
            case (short)80:
                this.flags = (Long)value;
                break;
            case (short)90:
                this.os = (String)value;
                break;
            case (short)100:
                this.osVer = (String)value;
                break;
            case (short)110:
                this.appId = (String)value;
                break;
            case (short)120:
                this.appVer = (String)value;
                break;
            case (short)130:
                this.cV = (String)value;
                break;
            case (short)500:
                this.tags = (java.util.HashMap<String, String>)value;
                break;
            case (short)510:
                this.ext = (java.util.HashMap<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>>)value;
                break;
            case (short)999:
                this.data = (com.microsoft.bond.Bonded<Microsoft.Telemetry.Base>)value;
                break;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#createInstance()
    */
    public com.microsoft.bond.BondMirror createInstance(com.microsoft.bond.StructDef structDef) {
        if (Microsoft.Telemetry.Extension.Schema.metadata == structDef.getMetadata()) {
            return new Microsoft.Telemetry.Extension();
        }

        if (Microsoft.Telemetry.Base.Schema.metadata == structDef.getMetadata()) {
            return new Microsoft.Telemetry.Base();
        }

        return null;
    }

    /*
     * @see com.microsoft.bond.BondMirror#getSchema()
     */
    public com.microsoft.bond.SchemaDef getSchema()
    {
        return getRuntimeSchema();
    }

    /**
     * Static method returning {@link SchemaDef} instance.
     */
    public static com.microsoft.bond.SchemaDef getRuntimeSchema()
    {
        return Schema.schemaDef;
    }


    // Constructor
    public Envelope() {
        reset();
    }

    /*
     * @see com.microsoft.bond.BondSerializable#reset()
     */
    public void reset() {
        reset("Envelope", "Microsoft.Telemetry.Envelope");
    }

    protected void reset(String name, String qualifiedName) {
        
        this.ver = "";
        this.name = "";
        this.time = "";
        this.popSample = 100;
        this.epoch = "";
        this.seqNum = 0L;
        this.iKey = "";
        this.flags = 0L;
        this.os = "";
        this.osVer = "";
        this.appId = "";
        this.appVer = "";
        this.cV = "";
        if (this.tags == null) {
            this.tags = new java.util.HashMap<String, String>();
        } else {
            this.tags.clear();
        }
        if (this.ext == null) {
            this.ext = new java.util.HashMap<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>>();
        } else {
            this.ext.clear();
        }
        this.data = new com.microsoft.bond.Bonded<Microsoft.Telemetry.Base>();
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, (com.microsoft.bond.SchemaDef)schema, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        reader.readBegin();
        readNested(reader);
        reader.readEnd();
    }

    /*
     * Called to read a struct that is contained inside another struct.
     */
    public void readNested(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        if (!reader.hasCapability(com.microsoft.bond.ProtocolCapability.TAGGED)) {
            readUntagged(reader, false);
        } else if (readTagged(reader, false)) {
            com.microsoft.bond.internal.ReadHelper.skipPartialStruct(reader);
        }
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        // read(com.microsoft.bond.internal.ProtocolHelper.createReader(reader, schema));
    }

    protected void readUntagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = reader.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);

        reader.readStructBegin(isBase);
        

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.ver = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"ver\", id=10");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.name = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"name\", id=20");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.time = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"time\", id=30");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.popSample = reader.readDouble();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.epoch = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.seqNum = reader.readInt64();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.iKey = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.flags = reader.readInt64();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.os = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.osVer = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.appId = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.appVer = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.cV = reader.readString();
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_tags(reader, com.microsoft.bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_ext(reader, com.microsoft.bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.data.read(reader);
        }
        reader.readStructEnd();
    } // ReadUntagged()


    protected boolean readTagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean isPartial;
        reader.readStructBegin(isBase);

        // BitArray seenRequiredFields = new BitArray(31);

        while (true) {
            com.microsoft.bond.ProtocolReader.FieldTag fieldTag = reader.readFieldBegin();

            if (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP
             || fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE) {
                isPartial = (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE);
                break;
            }

            switch (fieldTag.id) {
                case 10:
                    this.ver = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(10, true);
                    break;
                case 20:
                    this.name = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(20, true);
                    break;
                case 30:
                    this.time = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(30, true);
                    break;
                case 40:
                    this.popSample = com.microsoft.bond.internal.ReadHelper.readDouble(reader, fieldTag.type);
                    break;
                case 50:
                    this.epoch = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 60:
                    this.seqNum = com.microsoft.bond.internal.ReadHelper.readInt64(reader, fieldTag.type);
                    break;
                case 70:
                    this.iKey = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 80:
                    this.flags = com.microsoft.bond.internal.ReadHelper.readInt64(reader, fieldTag.type);
                    break;
                case 90:
                    this.os = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 100:
                    this.osVer = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 110:
                    this.appId = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 120:
                    this.appVer = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 130:
                    this.cV = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                case 500:
                    this.readFieldImpl_tags(reader, fieldTag.type);
                    break;
                case 510:
                    this.readFieldImpl_ext(reader, fieldTag.type);
                    break;
                case 999:
                    com.microsoft.bond.internal.ReadHelper.validateType(fieldTag.type, com.microsoft.bond.BondDataType.BT_STRUCT);
                    this.data.readNested(reader);
                    break;
                default:
                    reader.skip(fieldTag.type);
                    break;
            }

            reader.readFieldEnd();
        }

        reader.readStructEnd();

        //checkRequiredFieldsAreSeen(seenRequiredFields);
        return isPartial;
    }


    private void readFieldImpl_tags(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
        com.microsoft.bond.internal.ReadHelper.validateType(typeInPayload, com.microsoft.bond.BondDataType.BT_MAP);
    
        com.microsoft.bond.ProtocolReader.MapTag tag1 = reader.readMapContainerBegin();
    
        for (int i2 = 0; i2 < tag1.size; i2++) {
            String key3 = "";
            String val4 = "";
    
            // Read key
                key3 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag1.keyType);
    
            // Read value
                val4 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag1.valueType);
            //
            this.tags.put(key3, val4);
        }
    
        reader.readContainerEnd();
    } // readFieldImpl_tags


    private void readFieldImpl_ext(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
        com.microsoft.bond.internal.ReadHelper.validateType(typeInPayload, com.microsoft.bond.BondDataType.BT_MAP);
    
        com.microsoft.bond.ProtocolReader.MapTag tag1 = reader.readMapContainerBegin();
        com.microsoft.bond.internal.ReadHelper.validateType(tag1.valueType, com.microsoft.bond.BondDataType.BT_STRUCT);
    
        for (int i2 = 0; i2 < tag1.size; i2++) {
            String key3 = "";
            com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension> val4 = new com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>();
    
            // Read key
                key3 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag1.keyType);
    
            // Read value
                val4.readNested(reader);
            //
            this.ext.put(key3, val4);
        }
    
        reader.readContainerEnd();
    } // readFieldImpl_ext


    /*
     * @see com.microsoft.bond.BondSerializable#marshal()
     */
    public void marshal(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.marshal(this, writer);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#write()
     */
    public void write(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        writer.writeBegin();
        com.microsoft.bond.ProtocolWriter firstPassWriter;
        if ((firstPassWriter = writer.getFirstPassWriter()) != null)
        {
            writeNested(firstPassWriter, false);
            writeNested(writer, false);
        }
        else
        {
          writeNested(writer, false);
        }
        writer.writeEnd();
    }

    public void writeNested(com.microsoft.bond.ProtocolWriter writer, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = writer.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);
        writer.writeStructBegin(Schema.metadata, isBase);
        

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 10, Schema.ver_metadata);
        writer.writeString(ver);
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 20, Schema.name_metadata);
        writer.writeString(name);
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 30, Schema.time_metadata);
        writer.writeString(time);
        writer.writeFieldEnd();

        if (!canOmitFields || (popSample != Schema.popSample_metadata.getDefault_value().getDouble_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_DOUBLE, 40, Schema.popSample_metadata);
            writer.writeDouble(popSample);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_DOUBLE, 40, Schema.popSample_metadata);
        }

        if (!canOmitFields || (epoch != Schema.epoch_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 50, Schema.epoch_metadata);
            writer.writeString(epoch);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 50, Schema.epoch_metadata);
        }

        if (!canOmitFields || (seqNum != Schema.seqNum_metadata.getDefault_value().getInt_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_INT64, 60, Schema.seqNum_metadata);
            writer.writeInt64(seqNum);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_INT64, 60, Schema.seqNum_metadata);
        }

        if (!canOmitFields || (iKey != Schema.iKey_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 70, Schema.iKey_metadata);
            writer.writeString(iKey);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 70, Schema.iKey_metadata);
        }

        if (!canOmitFields || (flags != Schema.flags_metadata.getDefault_value().getInt_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_INT64, 80, Schema.flags_metadata);
            writer.writeInt64(flags);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_INT64, 80, Schema.flags_metadata);
        }

        if (!canOmitFields || (os != Schema.os_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 90, Schema.os_metadata);
            writer.writeString(os);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 90, Schema.os_metadata);
        }

        if (!canOmitFields || (osVer != Schema.osVer_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 100, Schema.osVer_metadata);
            writer.writeString(osVer);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 100, Schema.osVer_metadata);
        }

        if (!canOmitFields || (appId != Schema.appId_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 110, Schema.appId_metadata);
            writer.writeString(appId);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 110, Schema.appId_metadata);
        }

        if (!canOmitFields || (appVer != Schema.appVer_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 120, Schema.appVer_metadata);
            writer.writeString(appVer);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 120, Schema.appVer_metadata);
        }

        if (!canOmitFields || (cV != Schema.cV_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 130, Schema.cV_metadata);
            writer.writeString(cV);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 130, Schema.cV_metadata);
        }

        int size11 = (tags.size());
        if (!canOmitFields || (size11 != 0)) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_MAP, 500, Schema.tags_metadata);
            writer.writeContainerBegin(tags.size(), com.microsoft.bond.BondDataType.BT_STRING, com.microsoft.bond.BondDataType.BT_STRING);
            for (java.util.Map.Entry<String, String> e12 : tags.entrySet()) {
                // Key
                writer.writeString(e12.getKey());
                // Value
                writer.writeString(e12.getValue());
            }
            writer.writeContainerEnd();
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_MAP, 500, Schema.tags_metadata);
        }

        int size13 = (ext.size());
        if (!canOmitFields || (size13 != 0)) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_MAP, 510, Schema.ext_metadata);
            writer.writeContainerBegin(ext.size(), com.microsoft.bond.BondDataType.BT_STRING, com.microsoft.bond.BondDataType.BT_STRUCT);
            for (java.util.Map.Entry<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>> e14 : ext.entrySet()) {
                // Key
                writer.writeString(e14.getKey());
                // Value
                e14.getValue().writeNested(writer, false);
            }
            writer.writeContainerEnd();
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_MAP, 510, Schema.ext_metadata);
        }

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRUCT, 999, Schema.data_metadata);
        data.writeNested(writer, false);
        writer.writeFieldEnd();

        writer.writeStructEnd(isBase);
    } // writeNested


    public boolean memberwiseCompare(Object obj) {
        if (obj == null) {
            return false;
        }

        Envelope that = (Envelope)obj;

        return memberwiseCompareQuick(that) && memberwiseCompareDeep(that);
    }

    protected boolean memberwiseCompareQuick(Envelope that) {
        boolean equals = true;
        
        equals = equals && ((this.ver == null) == (that.ver == null));
        equals = equals && (this.ver == null ? true : (this.ver.length() == that.ver.length()));
        equals = equals && ((this.name == null) == (that.name == null));
        equals = equals && (this.name == null ? true : (this.name.length() == that.name.length()));
        equals = equals && ((this.time == null) == (that.time == null));
        equals = equals && (this.time == null ? true : (this.time.length() == that.time.length()));
        equals = equals && (Double.isNaN(this.popSample) ? Double.isNaN(that.popSample) : (this.popSample == that.popSample));
        equals = equals && ((this.epoch == null) == (that.epoch == null));
        equals = equals && (this.epoch == null ? true : (this.epoch.length() == that.epoch.length()));
        equals = equals && (this.seqNum == that.seqNum);
        equals = equals && ((this.iKey == null) == (that.iKey == null));
        equals = equals && (this.iKey == null ? true : (this.iKey.length() == that.iKey.length()));
        equals = equals && (this.flags == that.flags);
        equals = equals && ((this.os == null) == (that.os == null));
        equals = equals && (this.os == null ? true : (this.os.length() == that.os.length()));
        equals = equals && ((this.osVer == null) == (that.osVer == null));
        equals = equals && (this.osVer == null ? true : (this.osVer.length() == that.osVer.length()));
        equals = equals && ((this.appId == null) == (that.appId == null));
        equals = equals && (this.appId == null ? true : (this.appId.length() == that.appId.length()));
        equals = equals && ((this.appVer == null) == (that.appVer == null));
        equals = equals && (this.appVer == null ? true : (this.appVer.length() == that.appVer.length()));
        equals = equals && ((this.cV == null) == (that.cV == null));
        equals = equals && (this.cV == null ? true : (this.cV.length() == that.cV.length()));
        equals = equals && ((this.tags == null) == (that.tags == null));
        equals = equals && ((this.tags == null) ? true : (this.tags.size() == that.tags.size()));
        equals = equals && ((this.ext == null) == (that.ext == null));
        equals = equals && ((this.ext == null) ? true : (this.ext.size() == that.ext.size()));
        return equals;
    } // memberwiseCompareQuick

    protected boolean memberwiseCompareDeep(Envelope that) {
        boolean equals = true;
        
        equals = equals && (this.ver == null ? true : this.ver.equals(that.ver));
        equals = equals && (this.name == null ? true : this.name.equals(that.name));
        equals = equals && (this.time == null ? true : this.time.equals(that.time));
        equals = equals && (this.epoch == null ? true : this.epoch.equals(that.epoch));
        equals = equals && (this.iKey == null ? true : this.iKey.equals(that.iKey));
        equals = equals && (this.os == null ? true : this.os.equals(that.os));
        equals = equals && (this.osVer == null ? true : this.osVer.equals(that.osVer));
        equals = equals && (this.appId == null ? true : this.appId.equals(that.appId));
        equals = equals && (this.appVer == null ? true : this.appVer.equals(that.appVer));
        equals = equals && (this.cV == null ? true : this.cV.equals(that.cV));
        if (equals && this.tags != null && this.tags.size() != 0)
        {
            for (java.util.Map.Entry<String, String> e3 : this.tags.entrySet()) {
                String val1 = e3.getValue();
                String val2 = that.tags.get(e3.getKey());
                equals = equals && that.tags.containsKey(e3.getKey());
                if (equals) {
                    equals = equals && ((val1 == null) == (val2 == null));
                    equals = equals && (val1 == null ? true : (val1.length() == val2.length()));
                    equals = equals && (val1 == null ? true : val1.equals(val2));
                }
                if (!equals) {
                    break;
                }
            }
        }
        if (equals && this.ext != null && this.ext.size() != 0)
        {
            for (java.util.Map.Entry<String, com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension>> e6 : this.ext.entrySet()) {
                com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension> val4 = e6.getValue();
                com.microsoft.bond.Bonded<Microsoft.Telemetry.Extension> val5 = that.ext.get(e6.getKey());
                equals = equals && that.ext.containsKey(e6.getKey());
                if (equals) {
                    equals = equals && ((val4 == null) == (val5 == null));
                    equals = equals && (val4 == null ? true : val4.memberwiseCompare(val5));
                }
                if (!equals) {
                    break;
                }
            }
        }
        equals = equals && (this.data == null ? true : this.data.memberwiseCompare(that.data));
        return equals;
    } // memberwiseCompareDeep

}; // class Envelope
